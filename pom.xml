<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.poc.fis.openshift</groupId>
	<artifactId>fis-openshift-s2i-karaf-camel-qs</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>bundle</packaging>
	<name>fis-openshift-s2i-karaf-camel-qs</name>
	<description>Quick start for Fuse Integration Services (FIS) on OpenShift with Camel on Karaf JVM (blueprint) using Source to Image(S2I) build strategy</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.target>1.7</maven.compiler.target>
		<maven.compiler.source>1.7</maven.compiler.source>


		<fuse.version>6.2.1.redhat-169</fuse.version>
		<fabric8.version>2.2.0.redhat-085</fabric8.version>
		<fabric8-maven-plugin.version>${fabric8.version}</fabric8-maven-plugin.version>
		<docker-maven-plugin.version>0.19.0.fuse-000003</docker-maven-plugin.version>
		<karaf-maven-plugin.version>4.0.2.redhat-621085</karaf-maven-plugin.version>
		<maven-bundle-plugin.version>2.3.7</maven-bundle-plugin.version>
		<maven-compiler-plugin.version>3.3</maven-compiler-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<build-helper-maven-plugin.version>1.9.1</build-helper-maven-plugin.version>

		<docker.pullRegistry>registry.access.redhat.com</docker.pullRegistry>
		<docker.pushRegistry>192.168.56.101:8443</docker.pushRegistry>
		<docker.fromImage>jboss-fuse-6/fis-karaf-openshift:1.0</docker.fromImage>
		<openshift.project.name>fis-openshift-fabric8-maven</openshift.project.name>
		<docker.toImage>${openshift.project.name}/fis-openshift-fabric8-maven-karaf-camel-qs:${project.version}</docker.toImage>
		<docker.assemblyDescriptor>${basedir}/src/main/fabric8/assembly.xml</docker.assemblyDescriptor>
		<docker.port.container.jolokia>8778</docker.port.container.jolokia>
		<docker.port.container.http>8181</docker.port.container.http>

		<fabric8.label.component>${project.artifactId}</fabric8.label.component>
		<fabric8.label.container>karaf</fabric8.label.container>
		<fabric8.label.group>quickstarts</fabric8.label.group>
		<fabric8.iconRef>camel</fabric8.iconRef>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- fabric8 bom must be before jboss-fuse bom -->
			<dependency>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-project-bom-with-platform-deps</artifactId>
				<version>${fabric8.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- JBoss Fuse BOM -->
			<dependency>
				<groupId>org.jboss.fuse.bom</groupId>
				<artifactId>jboss-fuse-parent</artifactId>
				<version>${fuse.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-blueprint</artifactId>
		</dependency>

		<!-- Karaf microcontainer dependencies -->
		<dependency>
			<!-- scope is compile so all features (there is only one) are installed 
				into startup.properties, and the feature repo itself is not added in etc/org.apache.karaf.features.cfg 
				file -->
			<groupId>org.jboss.fuse</groupId>
			<artifactId>fuse-karaf-framework</artifactId>
			<version>${fuse.version}</version>
			<type>kar</type>
			<!-- no need to download kar dependencies -->
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>${maven-bundle-plugin.version}</version>
				<extensions>true</extensions>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-maven-plugin</artifactId>
				<version>${fabric8-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>json</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>json</goal>
						</goals>
					</execution>
					<execution>
						<id>attach</id>
						<phase>package</phase>
						<goals>
							<goal>attach</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${build-helper-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<!-- <artifact> <file>${project.build.outputDirectory}/features.xml</file> 
									<classifier>features</classifier> <type>xml</type> </artifact> -->
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- plugin goals have to be executed in order -->
			<!-- 1. Install the bundle -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>${maven-install-plugin.version}</version>
				<executions>
					<execution>
						<id>install-bundle</id>
						<goals>
							<goal>install</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- 2. Create Karaf Assembly (customized microservices container distribution) -->
			<plugin>
				<groupId>org.apache.karaf.tooling</groupId>
				<artifactId>karaf-maven-plugin</artifactId>
				<version>${karaf-maven-plugin.version}</version>
				<extensions>true</extensions>
				<executions>
					<execution>
						<id>karaf-assembly</id>
						<goals>
							<goal>assembly</goal>
						</goals>
						<phase>install</phase>
					</execution>
					<execution>
						<id>karaf-archive</id>
						<goals>
							<goal>archive</goal>
						</goals>
						<phase>install</phase>
					</execution>
				</executions>
				<configuration>
					<!-- we are using karaf 2.4.x -->
					<karafVersion>v24</karafVersion>
					<useReferenceUrls>true</useReferenceUrls>
					<!-- do not include build output directory -->
					<includeBuildOutputDirectory>false</includeBuildOutputDirectory>
					<!-- no startupFeatures -->
					<startupFeatures>
						<feature>karaf-framework</feature>
						<feature>shell</feature>
						<feature>jaas</feature>
						<feature>aries-blueprint</feature>
						<feature>camel-blueprint</feature>
					</startupFeatures>
					<startupBundles>
						<bundle>mvn:${project.groupId}/${project.artifactId}/${project.version}</bundle>
					</startupBundles>
				</configuration>
			</plugin>

			<!-- 3. Create Docker Image -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker-maven-plugin.version}</version>
				<configuration>
					<!-- <registry>${docker.pullRegistry}</registry> -->
					<pullRegistry>${docker.pullRegistry}</pullRegistry>
					<pushRegistry>${docker.pushRegistry}</pushRegistry>
					<images>
						<image>
							<name>${docker.toImage}</name>
							<build>
								<from>${docker.fromImage}</from>
								<assembly>
									<basedir>/deployments</basedir>
									<user>jboss:jboss:jboss</user>
									<inline
										xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
										xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
										<id>${project.artifactId}</id>
										<files>
											<!-- copy karaf archive -->
											<file>
												<source>${project.build.directory}/${project.artifactId}-${project.version}.tar.gz</source>
												<outputDirectory>/</outputDirectory>
												<fileMode>0644</fileMode>
											</file>
										</files>
									</inline>
								</assembly>
								<cmd>
									<shell>/deployments/deploy-and-run.sh</shell>
								</cmd>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- Default sample commands: -->
	<!-- mvn -Pf8-build ... build Docker images and create OpenShift deployment 
		configs -->
	<!-- mvn -Pf8-deploy ... f8-build + push to Docker registry + applying deployment 
		config to OpenShift -->
	<!-- mvn -Pf8-local-deploy ... deployment for a single node setup without 
		pushing to a registry For individual goal usage please consult the fabric8 
		documentation -->
	<profiles>
		<profile>
			<id>f8-build</id>
			<build>
				<defaultGoal>clean install docker:build fabric8:json</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-deploy</id>
			<properties>
				<fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-local-deploy</id>
			<properties>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
	</profiles>

</project>
